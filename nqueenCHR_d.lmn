// CHR 本の方法ではなく、単に変数の割当を1つにしてみて、正しくなかったら消すのを繰り返す
// 全ての queen は同じものとして扱うバージョン
// 例：in([0,0],!X) と in([0,0],!Y) は変数が違うけど同じものとして扱う
// nqueen3 を、変数の割当を自動でするように変更
// （当たり前だけど）めちゃくちゃ遅い
{
    start(4).

    empty1@@ queens([]) :-.
    empty2@@ safe(!X,[],N) :- int(N) |.

    in_false@@ in([],!X) :- false.

    makedomain@@ makedomains(I,N,[!Q|Qs])
        :-int(N), II = I+1, I1 = I*N, N1 = II*N-1
        | in([],I1,N1,N,!Q), makedomains(II,N,Qs).
    fin_makedomain@@ makedomains(I,N,[]):-int(I), int(N)|.

    in_list1@@ in(L,Min,Max,N,!X) :- Min =< Max, NN=Max-1, A=Max/N, B=Max mod N
        | in([[A,B]|L],Min,NN,N,!X).
    in_list2@@ in(L,Min,Max,N,!X) :- Min > Max, int(N) | in(L,!X).

    //chr book p.202
    enum([]) :-.
    enum([!X|L]) :- indomain(!X), enum(L).

    //chr book とは内容が違う（変更している）
    start0@@ start(N) :- int(N) | solve(N,N,[]).
    start1@@ solve(N,M,L) :- N>0, NN=N-1 | solve(NN,M,[!New|L]).
    start2@@ solve(N,M,L) :- N=:=0 | solve1(M,L).
    start3@@ solve1(N,Qs) 
        :- int(N), ground(Qs)
        | makedomains(0,N,Qs), enum(Qs).
        
    false_row@@ in([C,R],!X), in([C1,R1],!Y) :- R =:= R1, int(C), int(C1) | false.
    false_column@@ in([C,R],!X), in([C1,R1],!Y) :- C =:= C1, int(R), int(R1) | false.
    false_dr@@ in([C,R],!X), in([C1,R1],!Y) :- R1-R =:= C1-C | false.
    false_dl@@ in([C,R],!X), in([C1,R1],!Y) :- -(R1-R) =:= C1-C | false.

}.

false@@ {false, $p[], @r} :- .
indomain@@ {indomain(!X), in([[R,C]|L],!X), $p[], @r} 
    :- ground(L), int(R), int(C)
    | {in([R,C],!X), $p[], @r},{indomain(!X),in(L,!X), $p[], @r}.


